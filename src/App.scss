.App {
  text-align: center;
}

.App-logo {
  animation: App-logo-spin infinite 20s linear;
  height: 40vmin;
  pointer-events: none;
}

.App-header {
  background-color: #282c34;
  min-height: 40vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* custom scss responsive grid */

/* global styles */

body {
  background-color: #ccc;
  color: Teal;
  font-size: 100%;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
    'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji',
    'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  line-height: 1.5;
  margin: 0;
  padding: 1rem;
}

*,
::after,
::before {
  box-sizing: border-box;
}

.container {
  background-color: rgb(248, 205, 219);
  padding: 10px;
  &__row {
    background-color: #adcaff;
  }
  @at-root {
    [class*='container__col-'] {
      margin: 10px 0;
      display: flex;
      justify-content: space-around;
      background-color: rgb(240, 146, 162);
      border: #bbb 2px solid;
      border-radius: 8px;
    }
  }
}

$grid__columns: 12;
$grid__bp-sm: 576;
$grid__bp-md: 768;
$grid__bp-lg: 992;
$grid__bp-xl: 1200;
$grid-map: (
  '': 0,
  '-sm': $grid__bp-sm,
  '-md': $grid__bp-md,
  '-lg': $grid__bp-lg,
  '-xl': $grid__bp-xl
);
@mixin create-mq($breakpoint, $min-or-max) {
  @if ($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (#{$min-or-max}-width: $breakpoint *1px) {
      @content;
    }
  }
}
@mixin create-columns($breakpoint, $modifier, $grid-cols) {
  @include create-mq($breakpoint, 'min') {
    &__col#{$modifier}-offset-0 {
      margin-left: 0;
    }
    @for $width from 1 through $grid-cols {
      &__col#{$modifier}-#{$width} {
        flex-basis: $width / $grid__columns * 100%;
      }
      &__col#{$modifier}-offset-#{$width} {
        margin-left: $width / $grid__columns * 100%;
      }
    }
  }
}
@each $modifier, $breakpoint in $grid-map {
  @if ($modifier != '') {
    @include create-mq($breakpoint - 1, 'max') {
      .hidden#{$modifier}-down {
        display: none !important;
      }
    }
    @include create-mq($breakpoint, 'min') {
      .hidden#{$modifier}-up {
        display: none !important;
      }
    }
  }
}
.container {
  max-width: $grid__bp-xl * 1px;
  margin: 0 auto;
  &--fluid {
    max-width: 100%;
    margin: 0;
  }
  &__row {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
  }
  @each $modifier, $bp in $grid-map {
    @include create-columns($bp, $modifier, $grid__columns);
  }
}
.hidden {
  display: none !important;
}
